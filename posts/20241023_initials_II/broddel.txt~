
<!-- 

Same for female

```{r chunk02w}
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
#| eval: false                     # do / do not execute this chunk
# ==============================================================================
# LIBRARIES
# ==============================================================================
library(openxlsx)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
#file_first <- "data/Voornamen_Bevolking_2024.xlsx"
#a <- loadWorkbook(file_first)
#sheetNames <- sheets(a)
df_female <- read.xlsx(xlsxFile = file_first, sheet = sheetNames[2]) #, skipEmptyRows = FALSE)
#
# Keep only data for Belgium, Flanders, Wallonia and Brussels (drop ages)
#
df_female <- df_female[, 1:12]
df_female <- df_female[, c(2, 3, 5, 6, 8, 9, 11, 12)]
colnames(df_female) <- c("BE_name","BE_count","FL_name","FL_count","WA_name","WA_count","BR_name","BR_count")
df_female <- df_female[-1, ]
head(df_female, n=15)
#
# Count the number of names
#
num_BE_f <- nrow(df_female)
num_FL_f <- num_BE_f - sum(is.na(df_female$FL_count))
num_WA_f <- num_BE_f - sum(is.na(df_female$WA_count))
num_BR_f <- num_BE_f - sum(is.na(df_female$BR_count))
#
num_BE_fp <- sum(as.numeric(df_female$BE_count))
```

This means that for Belgium there are `{r} num_BE_f` unique female first names in the list. For the different regions this is `{r} num_FL_f`, `{r} num_WA_f` and `{r} num_BR_f` for respectively Flanders, Wallonia and Brussels. 

The total number of persons counted:  `{r} num_BE_fp` females and `{r} num_BE_mp` males, or `{r} num_BE_mp+num_BE_fp`. According to Statbel, the legal population in Belgium was 11 763 650 inhabitants On 1 January 2024, .

Let's focus on 

Dual names
# Create a sample vector with duplicate elements
vector_data <- c(1, 2, 3, 4, 4, 5)
 
# Identify duplicate elements
duplicated(vector_data)
 
# count of duplicated data
sum(duplicated(vector_data))


```{r chunk03}
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
#| eval: false                     # do / do not execute this chunk
# ==============================================================================
# LIBRARIES
# ==============================================================================
# library(openxlsx)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
# Further reduce the dataframes
#
df_temp <- df_female[,1:2]
df_temp <- rbind(df_temp,df_male[,1:2])
#
# Are there names shared between male and female?
#
test <- duplicated(df_temp[,1])
tsst <- sum(duplicated(df_temp[,1]))
#
# Quite some, but it also gives the double names (Jean-Dominique etc)
# We will only consider the first letter as initial
#
df_temp[,1] <- substr(df_temp[,1], 1, 1)
df_temp[,2] <- as.numeric(df_temp[,2])
#
# At this point the first column contains only the first letters
#
df_temp <- aggregate(df_temp[,-1],
                by = list(df_temp$BE_name),
                FUN = sum)             # Consolidate duplicates
num_ori <-  sum(df_temp[,2])
```

It turns out that there are `{r} nrow(df_temp)` different first characters, for in total `{r} sum(df_temp[,2])` inhabitants. With respect, but for the current excercise we drop the all names starting with something else than the 26 letters in the Latin alphabet (diacritcals, small characters, ...).

```{r chunk04}
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
#| eval: false                     # do / do not execute this chunk
# ==============================================================================
# LIBRARIES
# ==============================================================================
# library(openxlsx)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
num_w <- nrow(df_temp)
#
for (j in 1:num_w) {
  if (grepl("[A-Z]", df_temp[j,1])) {
#  cat("do nothing, is a CAPITAL\n")
} else {
#  cat("weird character, delete\n")
  df_temp[j,1:2] <- NA
}
}
#
# Now delete rows with NA
#
df_temp <- df_temp[!is.na(df_temp[,1]), ] 
#
num_rem <- sum(df_temp[,2])
# 
# We lost 
num_lost <- num_ori-num_rem
#
df_temp$pct <- 100*df_temp[,2]/num_rem
chk_pct <- sum(df_temp$pct)

```

Now let's see how this is distributed 

```{r chunk05}
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
#| eval: false                     # do / do not execute this chunk
# ==============================================================================
# LIBRARIES
# ==============================================================================
library(ggplot2)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
colnames(df_temp) <- c("Let","BE_count","BE_pct")
#
p <- ggplot(data=df_temp, aes(x=Let, y=BE_pct)) +
     geom_bar(stat="identity") +
     geom_hline(yintercept = 3.846) +
     theme_bw() +
     theme(
      legend.position="none",
      plot.title = element_text(size=12, color="black"),
      axis.title = element_text(size=10, color="black"),
      axis.text = element_text(size=8, color="black") 
      )
#
p

```

Nu omzetten in een pdf

```{r chunk06}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# Simulation, allowing non-uniform distribution of letters
# IS chiink 2 from part I
# ==============================================================================
# FUNCTIONS
# ------------------------------------------------------------------------------#
cmps_team_gh <- function(n_persons, df_p) {
#
# Draw a team: compose a team of n_persons, the GH way. 
# Supply a dataframe with probabilities for all letters in df_p
# Output dataframe df contains one row with n_persons two-letter initials, 
# and the last column is the percentage of unique initials in this team 
# composition.
#
  team <- replicate(n_persons, NA)
  for (i in 1:n_persons) { 
# 
# Draw the first initial, then the second and add to the team
# 
    urn <- runif(2)
    check <- which(with(df_p, df_p$low <= urn[1] & df_p$high > urn[1]))
    lttr <- df_p$lttr[check]
    check <- which(with(df_p, df_p$low <= urn[2] & df_p$high > urn[2]))
    lttr <- paste0(lttr, df_p$lttr[check])
    team[i] <- lttr
    }
#
  df <- team
  df <-  as.data.frame(t(df))
  df$count <- apply(df,1,function(x) sum(!duplicated(x)))
  df$count <- 100*df$count/n_persons
  return(df)
}
# ------------------------------------------------------------------------------
#
# Define the probability distribution function
#
# All letters have equal probability of occurence in this case
#
#df_p <- data.frame(lttr = LETTERS, prob = replicate(26, 1/26))
#
#
# Letters have a probability from the Statbel data
#
df_p <- df_temp
df_p <- df_temp[, -2]
df_p[,2] <- df_p[,2]/100




# Prepare to pass on to random draw
#
colnames(df_p) <- c('lttr', 'low')
df_p$high <- df_p$low
#
df_p[1,2] <- 0.00
df_p[26,3] <- 1.00
#
for (i in 2:26) { 
  j <- i-1
  df_p[i,3] <- df_p[j,3]+df_p[i,2]
  df_p[i,2] <- df_p[j,3]
}
#
# ------------------------------------------------------------------------------
#
# Set the number of persons in a team and the number of teams to be composed 
# (= number of repeats)
#
n_persons <- 8     # number of persons per team [AS: 8]
n_teams <- 1000    # number of repeats (teams)  [AS: 1000]
n_exper <-100      # number of experiments      [AS:  100]
#
d_gh <- as.data.frame(matrix(data=NA, ncol=2, nrow=n_exper))
#
repro <- FALSE  # set TRUE for reproducible random numbers
#
for (xp in 1:n_exper) {
#
# Set a seed and compose the first team
#
zaad <- xp
#
if (repro == TRUE) {
  set.seed(zaad)
}
else
{
 a=as.numeric(Sys.time())
 set.seed(a)
}
teams <- cmps_team_gh(n_persons, df_p)
#
# Fill up the teams dataframe with the remaining teams
#   
for (i in 2:n_teams) { 
   team <- cmps_team_gh(n_persons, df_p)
   teams <- rbind(teams, team)
}
#
cnt_unique <- length(which(teams$count==100))
pct_multip <- 100*(1-cnt_unique/n_teams)
#
# Uncomment for writing csv data files per experiment
#
fl <- paste0('exp_', formatC(xp, width=4, flag="0"), '.csv')
# write.csv(teams, fl)
#
d_gh[xp, 1] <- fl
d_gh[xp, 2] <- pct_multip
}
#
n_gh <- length(d_gh)
m_gh <- mean(d_gh[,2])
s_gh <- sd(d_gh[,2])
rsd_gh <- 100*s_gh/m_gh

```

Based on these data, a mean of `{r} round(m_gh, digits=2)` % is observed, with a standard deviation of `{r} round(s_gh,digits=2)` %. 


steek in http://www.sthda.com/english/wiki/one-sample-t-test-in-r 



### in Flanders

exactly the same code but with ccolumns 3 and 4


```{r chunk13}
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
#| eval: false                     # do / do not execute this chunk
# ==============================================================================
# LIBRARIES
# ==============================================================================
# library(openxlsx)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
# Further reduce the dataframes
#
df_temp <- df_female[,3:4]
df_temp <- rbind(df_temp,df_male[,3:4])
#
# Are there names shared between male and female?
#
test <- duplicated(df_temp[,1])
tsst <- sum(duplicated(df_temp[,1]))
#
# Quite some, but it also gives the double names (Jean-Dominique etc)
# We will only consider the first letter as initial
#
df_temp[,1] <- substr(df_temp[,1], 1, 1)
df_temp[,2] <- as.numeric(df_temp[,2])
#
# At this point the first column contains only the first letters
#
df_temp <- aggregate(df_temp[,-1],
                by = list(df_temp$FL_name),
                FUN = sum)             # Consolidate duplicates
num_ori <-  sum(df_temp[,2])
```

It turns out that there are `{r} nrow(df_temp)` different first characters, for in total `{r} sum(df_temp[,2])` inhabitants. With respect, but for the current excercise we drop the all names starting with something else than the 26 letters in the Latin alphabet (diacritcals, small characters, ...).

```{r chunk14}

#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# LIBRARIES
# ==============================================================================
# library(openxlsx)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
num_w <- nrow(df_temp)
#
for (j in 1:num_w) {
  if (grepl("[A-Z]", df_temp[j,1])) {
#  cat("do nothing, is a CAPITAL\n")
} else {
#  cat("weird character, delete\n")
  df_temp[j,1:2] <- NA
}
}
#
# Now delete rows with NA
#
df_temp <- df_temp[!is.na(df_temp[,1]), ] 
#
num_rem <- sum(df_temp[,2])
# 
# We lost 
num_lost <- num_ori-num_rem
#
df_temp$pct <- 100*df_temp[,2]/num_rem
chk_pct <- sum(df_temp$pct)

```






```{r chunk15}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# LIBRARIES
# ==============================================================================
library(ggplot2)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
colnames(df_temp) <- c("Let","BE_count","BE_pct")
#
p <- ggplot(data=df_temp, aes(x=Let, y=BE_pct)) +
     geom_bar(stat="identity") +
     geom_hline(yintercept = 3.846)
#
p

```










```{r chunk16}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# Simulation, allowing non-uniform distribution of letters
# IS chiink 2 from part I
# ==============================================================================
# FUNCTIONS
# ------------------------------------------------------------------------------#
cmps_team_gh <- function(n_persons, df_p) {
#
# Draw a team: compose a team of n_persons, the GH way. 
# Supply a dataframe with probabilities for all letters in df_p
# Output dataframe df contains one row with n_persons two-letter initials, 
# and the last column is the percentage of unique initials in this team 
# composition.
#
  team <- replicate(n_persons, NA)
  for (i in 1:n_persons) { 
# 
# Draw the first initial, then the second and add to the team
# 
    urn <- runif(2)
    check <- which(with(df_p, df_p$low <= urn[1] & df_p$high > urn[1]))
    lttr <- df_p$lttr[check]
    check <- which(with(df_p, df_p$low <= urn[2] & df_p$high > urn[2]))
    lttr <- paste0(lttr, df_p$lttr[check])
    team[i] <- lttr
    }
#
  df <- team
  df <-  as.data.frame(t(df))
  df$count <- apply(df,1,function(x) sum(!duplicated(x)))
  df$count <- 100*df$count/n_persons
  return(df)
}
# ------------------------------------------------------------------------------
#
# Define the probability distribution function
#
# All letters have equal probability of occurence in this case
#
#df_p <- data.frame(lttr = LETTERS, prob = replicate(26, 1/26))
#
#
# Letters have a probability from the Statbel data
#
df_p <- df_temp
df_p <- df_temp[, -2]
df_p[,2] <- df_p[,2]/100




# Prepare to pass on to random draw
#
colnames(df_p) <- c('lttr', 'low')
df_p$high <- df_p$low
#
df_p[1,2] <- 0.00
df_p[26,3] <- 1.00
#
for (i in 2:26) { 
  j <- i-1
  df_p[i,3] <- df_p[j,3]+df_p[i,2]
  df_p[i,2] <- df_p[j,3]
}
#
# ------------------------------------------------------------------------------
#
# Set the number of persons in a team and the number of teams to be composed 
# (= number of repeats)
#
n_persons <- 8     # number of persons per team [AS: 8]
n_teams <- 1000    # number of repeats (teams)  [AS: 1000]
n_exper <-100      # number of experiments      [AS:  100]
#
d_gh <- as.data.frame(matrix(data=NA, ncol=2, nrow=n_exper))
#
repro <- FALSE  # set TRUE for reproducible random numbers
#
for (xp in 1:n_exper) {
#
# Set a seed and compose the first team
#
zaad <- xp
#
if (repro == TRUE) {
  set.seed(zaad)
}
else
{
 a=as.numeric(Sys.time())
 set.seed(a)
}
teams <- cmps_team_gh(n_persons, df_p)
#
# Fill up the teams dataframe with the remaining teams
#   
for (i in 2:n_teams) { 
   team <- cmps_team_gh(n_persons, df_p)
   teams <- rbind(teams, team)
}
#
cnt_unique <- length(which(teams$count==100))
pct_multip <- 100*(1-cnt_unique/n_teams)
#
# Uncomment for writing csv data files per experiment
#
fl <- paste0('exp_', formatC(xp, width=4, flag="0"), '.csv')
# write.csv(teams, fl)
#
d_gh[xp, 1] <- fl
d_gh[xp, 2] <- pct_multip
}
#
n_gh <- length(d_gh)
m_gh <- mean(d_gh[,2])
s_gh <- sd(d_gh[,2])
rsd_gh <- 100*s_gh/m_gh
```

Based on these data, a mean of `{r} round(m_gh,digits=2)` % is observed, with a standard deviation of `{r} round(s_gh,digits=2)` %. 

#### Wallomia

exactly the same code but with ccolumns 5 and 6


```{r chunk23}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# LIBRARIES
# ==============================================================================
# library(openxlsx)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
# Further reduce the dataframes
#
df_temp <- df_female[,5:6]
df_temp <- rbind(df_temp,df_male[,5:6])
#
# Are there names shared between male and female?
#
test <- duplicated(df_temp[,1])
tsst <- sum(duplicated(df_temp[,1]))
#
# Quite some, but it also gives the double names (Jean-Dominique etc)
# We will only consider the first letter as initial
#
df_temp[,1] <- substr(df_temp[,1], 1, 1)
df_temp[,2] <- as.numeric(df_temp[,2])
#
# At this point the first column contains only the first letters
#
df_temp <- aggregate(df_temp[,-1],
                by = list(df_temp$WA_name),
                FUN = sum)             # Consolidate duplicates
num_ori <-  sum(df_temp[,2])
```

It turns out that there are `{r} nrow(df_temp)` different first characters, for in total `{r} sum(df_temp[,2])` inhabitants. With respect, but for the current excercise we drop the all names starting with something else than the 26 letters in the Latin alphabet (diacritcals, small characters, ...).

```{r chunk24}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# LIBRARIES
# ==============================================================================
# library(openxlsx)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
num_w <- nrow(df_temp)
#
for (j in 1:num_w) {
  if (grepl("[A-Z]", df_temp[j,1])) {
#  cat("do nothing, is a CAPITAL\n")
} else {
#  cat("weird character, delete\n")
  df_temp[j,1:2] <- NA
}
}
#
# Now delete rows with NA
#
df_temp <- df_temp[!is.na(df_temp[,1]), ] 
#
num_rem <- sum(df_temp[,2])
# 
# We lost 
num_lost <- num_ori-num_rem
#
df_temp$pct <- 100*df_temp[,2]/num_rem
chk_pct <- sum(df_temp$pct)

```






```{r chunk25}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# LIBRARIES
# ==============================================================================
library(ggplot2)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
colnames(df_temp) <- c("Let","WA_count","WA_pct")
#
p <- ggplot(data=df_temp, aes(x=Let, y=WA_pct)) +
     geom_bar(stat="identity") +
     geom_hline(yintercept = 3.846)
#
p

```










```{r chunk26}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# Simulation, allowing non-uniform distribution of letters
# IS chiink 2 from part I
# ==============================================================================
# FUNCTIONS
# ------------------------------------------------------------------------------#
cmps_team_gh <- function(n_persons, df_p) {
#
# Draw a team: compose a team of n_persons, the GH way. 
# Supply a dataframe with probabilities for all letters in df_p
# Output dataframe df contains one row with n_persons two-letter initials, 
# and the last column is the percentage of unique initials in this team 
# composition.
#
  team <- replicate(n_persons, NA)
  for (i in 1:n_persons) { 
# 
# Draw the first initial, then the second and add to the team
# 
    urn <- runif(2)
    check <- which(with(df_p, df_p$low <= urn[1] & df_p$high > urn[1]))
    lttr <- df_p$lttr[check]
    check <- which(with(df_p, df_p$low <= urn[2] & df_p$high > urn[2]))
    lttr <- paste0(lttr, df_p$lttr[check])
    team[i] <- lttr
    }
#
  df <- team
  df <-  as.data.frame(t(df))
  df$count <- apply(df,1,function(x) sum(!duplicated(x)))
  df$count <- 100*df$count/n_persons
  return(df)
}
# ------------------------------------------------------------------------------
#
# Define the probability distribution function
#
# All letters have equal probability of occurence in this case
#
#df_p <- data.frame(lttr = LETTERS, prob = replicate(26, 1/26))
#
#
# Letters have a probability from the Statbel data
#
df_p <- df_temp
df_p <- df_temp[, -2]
df_p[,2] <- df_p[,2]/100




# Prepare to pass on to random draw
#
colnames(df_p) <- c('lttr', 'low')
df_p$high <- df_p$low
#
df_p[1,2] <- 0.00
df_p[26,3] <- 1.00
#
for (i in 2:26) { 
  j <- i-1
  df_p[i,3] <- df_p[j,3]+df_p[i,2]
  df_p[i,2] <- df_p[j,3]
}
#
# ------------------------------------------------------------------------------
#
# Set the number of persons in a team and the number of teams to be composed 
# (= number of repeats)
#
n_persons <- 8     # number of persons per team [AS: 8]
n_teams <- 1000    # number of repeats (teams)  [AS: 1000]
n_exper <-100      # number of experiments      [AS:  100]
#
d_gh <- as.data.frame(matrix(data=NA, ncol=2, nrow=n_exper))
#
repro <- FALSE  # set TRUE for reproducible random numbers
#
for (xp in 1:n_exper) {
#
# Set a seed and compose the first team
#
zaad <- xp
#
if (repro == TRUE) {
  set.seed(zaad)
}
else
{
 a=as.numeric(Sys.time())
 set.seed(a)
}
teams <- cmps_team_gh(n_persons, df_p)
#
# Fill up the teams dataframe with the remaining teams
#   
for (i in 2:n_teams) { 
   team <- cmps_team_gh(n_persons, df_p)
   teams <- rbind(teams, team)
}
#
cnt_unique <- length(which(teams$count==100))
pct_multip <- 100*(1-cnt_unique/n_teams)
#
# Uncomment for writing csv data files per experiment
#
fl <- paste0('exp_', formatC(xp, width=4, flag="0"), '.csv')
# write.csv(teams, fl)
#
d_gh[xp, 1] <- fl
d_gh[xp, 2] <- pct_multip
}
#
n_gh <- length(d_gh)
m_gh <- mean(d_gh[,2])
s_gh <- sd(d_gh[,2])
rsd_gh <- 100*s_gh/m_gh
```

WA Based on these data, a mean of `{r} round(m_gh,digits=2)` % is observed, with a standard deviation of `{r} round(s_gh,digits=2)` %. 


#### Brussels

exactly the same code but with ccolumns 7 and 8


```{r chunk33}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# LIBRARIES
# ==============================================================================
# library(openxlsx)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
# Further reduce the dataframes
#
df_temp <- df_female[,7:8]
df_temp <- rbind(df_temp,df_male[,7:8])
#
# Are there names shared between male and female?
#
test <- duplicated(df_temp[,1])
tsst <- sum(duplicated(df_temp[,1]))
#
# Quite some, but it also gives the double names (Jean-Dominique etc)
# We will only consider the first letter as initial
#
df_temp[,1] <- substr(df_temp[,1], 1, 1)
df_temp[,2] <- as.numeric(df_temp[,2])
#
# At this point the first column contains only the first letters
#
df_temp <- aggregate(df_temp[,-1],
                by = list(df_temp$BR_name),
                FUN = sum)             # Consolidate duplicates
num_ori <-  sum(df_temp[,2])
```

It turns out that there are `{r} nrow(df_temp)` different first characters, for in total `{r} sum(df_temp[,2])` inhabitants. With respect, but for the current excercise we drop the all names starting with something else than the 26 letters in the Latin alphabet (diacritcals, small characters, ...).

```{r chunk34}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# LIBRARIES
# ==============================================================================
# library(openxlsx)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
num_w <- nrow(df_temp)
#
for (j in 1:num_w) {
  if (grepl("[A-Z]", df_temp[j,1])) {
#  cat("do nothing, is a CAPITAL\n")
} else {
#  cat("weird character, delete\n")
  df_temp[j,1:2] <- NA
}
}
#
# Now delete rows with NA
#
df_temp <- df_temp[!is.na(df_temp[,1]), ] 
#
num_rem <- sum(df_temp[,2])
# 
# We lost 
num_lost <- num_ori-num_rem
#
df_temp$pct <- 100*df_temp[,2]/num_rem
chk_pct <- sum(df_temp$pct)

```






```{r chunk35}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# LIBRARIES
# ==============================================================================
library(ggplot2)
# ==============================================================================
# FUNCTIONS
# ==============================================================================
#
colnames(df_temp) <- c("Let","BR_count","BR_pct")
#
p <- ggplot(data=df_temp, aes(x=Let, y=BR_pct)) +
     geom_bar(stat="identity") +
     geom_hline(yintercept = 3.846)
#
p

```










```{r chunk36}
#| eval: false                     # do / do not execute this chunk
#| echo: true                      # show code in output doc
#| warning: false                  # hide warnings in output doc
#| message: false                  # hide messages in output doc
# ==============================================================================
# Simulation, allowing non-uniform distribution of letters
# IS chiink 2 from part I
# ==============================================================================
# FUNCTIONS
# ------------------------------------------------------------------------------#
cmps_team_gh <- function(n_persons, df_p) {
#
# Draw a team: compose a team of n_persons, the GH way. 
# Supply a dataframe with probabilities for all letters in df_p
# Output dataframe df contains one row with n_persons two-letter initials, 
# and the last column is the percentage of unique initials in this team 
# composition.
#
  team <- replicate(n_persons, NA)
  for (i in 1:n_persons) { 
# 
# Draw the first initial, then the second and add to the team
# 
    urn <- runif(2)
    check <- which(with(df_p, df_p$low <= urn[1] & df_p$high > urn[1]))
    lttr <- df_p$lttr[check]
    check <- which(with(df_p, df_p$low <= urn[2] & df_p$high > urn[2]))
    lttr <- paste0(lttr, df_p$lttr[check])
    team[i] <- lttr
    }
#
  df <- team
  df <-  as.data.frame(t(df))
  df$count <- apply(df,1,function(x) sum(!duplicated(x)))
  df$count <- 100*df$count/n_persons
  return(df)
}
# ------------------------------------------------------------------------------
#
# Define the probability distribution function
#
# All letters have equal probability of occurence in this case
#
#df_p <- data.frame(lttr = LETTERS, prob = replicate(26, 1/26))
#
#
# Letters have a probability from the Statbel data
#
df_p <- df_temp
df_p <- df_temp[, -2]
df_p[,2] <- df_p[,2]/100




# Prepare to pass on to random draw
#
colnames(df_p) <- c('lttr', 'low')
df_p$high <- df_p$low
#
df_p[1,2] <- 0.00
df_p[26,3] <- 1.00
#
for (i in 2:26) { 
  j <- i-1
  df_p[i,3] <- df_p[j,3]+df_p[i,2]
  df_p[i,2] <- df_p[j,3]
}
#
# ------------------------------------------------------------------------------
#
# Set the number of persons in a team and the number of teams to be composed 
# (= number of repeats)
#
n_persons <- 8     # number of persons per team [AS: 8]
n_teams <- 1000    # number of repeats (teams)  [AS: 1000]
n_exper <-100      # number of experiments      [AS:  100]
#
d_gh <- as.data.frame(matrix(data=NA, ncol=2, nrow=n_exper))
#
repro <- FALSE  # set TRUE for reproducible random numbers
#
for (xp in 1:n_exper) {
#
# Set a seed and compose the first team
#
zaad <- xp
#
if (repro == TRUE) {
  set.seed(zaad)
}
else
{
 a=as.numeric(Sys.time())
 set.seed(a)
}
teams <- cmps_team_gh(n_persons, df_p)
#
# Fill up the teams dataframe with the remaining teams
#   
for (i in 2:n_teams) { 
   team <- cmps_team_gh(n_persons, df_p)
   teams <- rbind(teams, team)
}
#
cnt_unique <- length(which(teams$count==100))
pct_multip <- 100*(1-cnt_unique/n_teams)
#
# Uncomment for writing csv data files per experiment
#
fl <- paste0('exp_', formatC(xp, width=4, flag="0"), '.csv')
# write.csv(teams, fl)
#
d_gh[xp, 1] <- fl
d_gh[xp, 2] <- pct_multip
}
#
n_gh <- length(d_gh)
m_gh <- mean(d_gh[,2])
s_gh <- sd(d_gh[,2])
rsd_gh <- 100*s_gh/m_gh
```

BR Based on these data, a mean of `{r} round(m_gh,digits=2)` % is observed, with a standard deviation of `{r} round(s_gh,digits=2)` %. 

-->